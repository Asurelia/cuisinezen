/**
 * Validateur de fonctionnalit√©s m√©tier pour CuisineZen
 * Teste tous les flows critiques de l'application
 */

import { ComponentAnalysis } from '../test-agent';

export interface BusinessValidationResult {
  feature: string;
  status: 'pass' | 'fail' | 'warning';
  details: string[];
  testCases: string[];
  coverage: number;
}

export class CuisineZenBusinessValidator {
  
  /**
   * Valide toutes les fonctionnalit√©s m√©tier de CuisineZen
   */
  async validateAllFeatures(analyses: ComponentAnalysis[]): Promise<BusinessValidationResult[]> {
    console.log('üè¢ Validating CuisineZen business features...');
    
    const results: BusinessValidationResult[] = [];
    
    results.push(await this.validateProductManagement(analyses));
    results.push(await this.validateRecipeManagement(analyses));
    results.push(await this.validateInventoryTracking(analyses));
    results.push(await this.validateBarcodeScanning(analyses));
    results.push(await this.validateImageHandling(analyses));
    results.push(await this.validateFirestoreIntegration(analyses));
    results.push(await this.validateAnalytics(analyses));
    results.push(await this.validateUserInterface(analyses));
    
    return results;
  }

  /**
   * Valide la gestion des produits
   */
  private async validateProductManagement(analyses: ComponentAnalysis[]): Promise<BusinessValidationResult> {
    const productComponents = analyses.filter(a => 
      a.name.toLowerCase().includes('product') ||
      a.name.toLowerCase().includes('add-product') ||
      a.name.toLowerCase().includes('edit-product')
    );

    const details: string[] = [];
    const testCases: string[] = [];
    let coverage = 0;

    // V√©rification de l'ajout de produit
    const addProductComponent = productComponents.find(c => c.name.includes('AddProduct'));
    if (addProductComponent) {
      details.push('‚úÖ Composant d\'ajout de produit d√©tect√©');
      coverage += 20;
      
      // V√©rifier les validations
      const hasValidation = addProductComponent.businessLogic.some(bl => 
        bl.validations.length > 0
      );
      if (hasValidation) {
        details.push('‚úÖ Validations de formulaire pr√©sentes');
        coverage += 15;
      } else {
        details.push('‚ö†Ô∏è Validations de formulaire manquantes');
      }

      // V√©rifier la suggestion de cat√©gorie
      const hasAISuggestion = addProductComponent.imports.some(imp => 
        imp.includes('actions') || imp.includes('ai')
      );
      if (hasAISuggestion) {
        details.push('‚úÖ Suggestion AI de cat√©gorie int√©gr√©e');
        coverage += 15;
      }

      // Tests sugg√©r√©s
      testCases.push(...[
        'Test d\'ajout de produit complet avec toutes les donn√©es',
        'Test de validation des champs obligatoires',
        'Test de suggestion automatique de cat√©gorie',
        'Test d\'ajout de produit avec image',
        'Test d\'ajout de produit avec date d\'expiration',
        'Test de gestion des lots multiples'
      ]);
    } else {
      details.push('‚ùå Composant d\'ajout de produit non trouv√©');
    }

    // V√©rification de l'√©dition de produit
    const editProductComponent = productComponents.find(c => c.name.includes('EditProduct'));
    if (editProductComponent) {
      details.push('‚úÖ Composant d\'√©dition de produit d√©tect√©');
      coverage += 20;
      
      testCases.push(...[
        'Test de modification des informations produit',
        'Test de gestion des lots existants',
        'Test de suppression de produit'
      ]);
    } else {
      details.push('‚ö†Ô∏è Composant d\'√©dition de produit non d√©tect√©');
    }

    // V√©rification de l'affichage des produits
    const productDisplayComponents = analyses.filter(a => 
      a.name.includes('ProductCard') || a.name.includes('InventoryList')
    );
    if (productDisplayComponents.length > 0) {
      details.push('‚úÖ Composants d\'affichage des produits d√©tect√©s');
      coverage += 15;
      
      testCases.push(...[
        'Test d\'affichage de la liste des produits',
        'Test de filtrage par cat√©gorie',
        'Test de recherche de produits',
        'Test d\'affichage des dates d\'expiration'
      ]);
    }

    // V√©rification des cat√©gories
    const hasCategories = analyses.some(a => 
      a.imports.some(imp => imp.includes('types')) &&
      a.interactions.some(i => i.selector.includes('category'))
    );
    if (hasCategories) {
      details.push('‚úÖ Gestion des cat√©gories impl√©ment√©e');
      coverage += 15;
    }

    return {
      feature: 'Gestion des Produits',
      status: coverage >= 70 ? 'pass' : coverage >= 40 ? 'warning' : 'fail',
      details,
      testCases,
      coverage
    };
  }

  /**
   * Valide la gestion des recettes
   */
  private async validateRecipeManagement(analyses: ComponentAnalysis[]): Promise<BusinessValidationResult> {
    const recipeComponents = analyses.filter(a => 
      a.name.toLowerCase().includes('recipe')
    );

    const details: string[] = [];
    const testCases: string[] = [];
    let coverage = 0;

    // V√©rification du formulaire de recette
    const recipeFormComponent = recipeComponents.find(c => 
      c.name.includes('RecipeForm') || c.name.includes('RecipeDialog')
    );
    if (recipeFormComponent) {
      details.push('‚úÖ Formulaire de cr√©ation/√©dition de recette d√©tect√©');
      coverage += 25;

      // V√©rifier la gestion des ingr√©dients
      const hasIngredients = recipeFormComponent.interactions.some(i => 
        i.selector.includes('ingredients') || i.action.includes('ingredient')
      );
      if (hasIngredients) {
        details.push('‚úÖ Gestion des ingr√©dients impl√©ment√©e');
        coverage += 20;
      }

      // V√©rifier les validations
      const hasValidations = recipeFormComponent.businessLogic.some(bl => 
        bl.validations.length > 0
      );
      if (hasValidations) {
        details.push('‚úÖ Validations de recette pr√©sentes');
        coverage += 15;
      }

      testCases.push(...[
        'Test de cr√©ation de recette avec ingr√©dients multiples',
        'Test de validation des ingr√©dients requis',
        'Test d\'√©dition de recette existante',
        'Test d\'ajout/suppression d\'ingr√©dients dynamique',
        'Test de calcul automatique du temps total',
        'Test d\'upload d\'image de recette'
      ]);
    } else {
      details.push('‚ùå Formulaire de recette non trouv√©');
    }

    // V√©rification de l'affichage des recettes
    const recipeDisplayComponents = recipeComponents.filter(c => 
      c.name.includes('RecipeCard') || c.name.includes('RecipeList')
    );
    if (recipeDisplayComponents.length > 0) {
      details.push('‚úÖ Composants d\'affichage des recettes d√©tect√©s');
      coverage += 20;

      testCases.push(...[
        'Test d\'affichage de la grille de recettes',
        'Test de recherche de recettes',
        'Test de filtrage par difficult√©/temps',
        'Test de pagination des recettes'
      ]);
    }

    // V√©rification de la logique m√©tier recette
    const hasRecipeLogic = recipeComponents.some(c => 
      c.businessLogic.some(bl => bl.feature.toLowerCase().includes('recette'))
    );
    if (hasRecipeLogic) {
      details.push('‚úÖ Logique m√©tier des recettes impl√©ment√©e');
      coverage += 20;
    }

    return {
      feature: 'Gestion des Recettes',
      status: coverage >= 70 ? 'pass' : coverage >= 40 ? 'warning' : 'fail',
      details,
      testCases,
      coverage
    };
  }

  /**
   * Valide le suivi d'inventaire
   */
  private async validateInventoryTracking(analyses: ComponentAnalysis[]): Promise<BusinessValidationResult> {
    const inventoryComponents = analyses.filter(a => 
      a.name.toLowerCase().includes('inventory') ||
      a.name.toLowerCase().includes('batch') ||
      a.name.toLowerCase().includes('expiry')
    );

    const details: string[] = [];
    const testCases: string[] = [];
    let coverage = 0;

    // V√©rification de l'affichage de l'inventaire
    const inventoryListComponent = inventoryComponents.find(c => 
      c.name.includes('InventoryList') || c.name.includes('Inventory')
    );
    if (inventoryListComponent) {
      details.push('‚úÖ Composant de liste d\'inventaire d√©tect√©');
      coverage += 30;

      testCases.push(...[
        'Test d\'affichage complet de l\'inventaire',
        'Test de tri par date d\'expiration',
        'Test de filtrage par cat√©gorie',
        'Test d\'alertes d\'expiration'
      ]);
    }

    // V√©rification de la gestion des lots
    const hasBatchManagement = analyses.some(a => 
      a.businessLogic.some(bl => 
        bl.flow.some(f => f.toLowerCase().includes('batch') || f.toLowerCase().includes('lot'))
      )
    );
    if (hasBatchManagement) {
      details.push('‚úÖ Gestion des lots impl√©ment√©e');
      coverage += 25;

      testCases.push(...[
        'Test d\'ajout de nouveaux lots',
        'Test de modification des quantit√©s',
        'Test de gestion des dates d\'expiration par lot'
      ]);
    }

    // V√©rification des alertes d'expiration
    const expiryComponents = analyses.filter(a => 
      a.name.toLowerCase().includes('expir') || 
      a.name.toLowerCase().includes('alert')
    );
    if (expiryComponents.length > 0) {
      details.push('‚úÖ Syst√®me d\'alertes d\'expiration d√©tect√©');
      coverage += 25;

      testCases.push(...[
        'Test d\'alertes produits bient√¥t expir√©s',
        'Test d\'alertes produits expir√©s',
        'Test de notifications d\'expiration'
      ]);
    }

    // V√©rification du calcul des stocks
    const hasStockCalculation = analyses.some(a => 
      a.businessLogic.some(bl => 
        bl.flow.some(f => f.toLowerCase().includes('stock') || f.toLowerCase().includes('quantit'))
      )
    );
    if (hasStockCalculation) {
      details.push('‚úÖ Calculs de stock impl√©ment√©s');
      coverage += 20;
    }

    return {
      feature: 'Suivi d\'Inventaire',
      status: coverage >= 70 ? 'pass' : coverage >= 40 ? 'warning' : 'fail',
      details,
      testCases,
      coverage
    };
  }

  /**
   * Valide le scanner de codes-barres
   */
  private async validateBarcodeScanning(analyses: ComponentAnalysis[]): Promise<BusinessValidationResult> {
    const barcodeComponents = analyses.filter(a => 
      a.name.toLowerCase().includes('barcode') ||
      a.name.toLowerCase().includes('scanner')
    );

    const details: string[] = [];
    const testCases: string[] = [];
    let coverage = 0;

    if (barcodeComponents.length > 0) {
      details.push('‚úÖ Composant de scanner de codes-barres d√©tect√©');
      coverage += 40;

      // V√©rifier l'int√©gration cam√©ra
      const hasCameraIntegration = barcodeComponents.some(c => 
        c.imports.some(imp => imp.includes('zxing') || imp.includes('camera'))
      );
      if (hasCameraIntegration) {
        details.push('‚úÖ Int√©gration cam√©ra pour le scanning');
        coverage += 30;
      }

      // V√©rifier la gestion des erreurs
      const hasErrorHandling = barcodeComponents.some(c => 
        c.businessLogic.some(bl => 
          bl.validations.some(v => v.toLowerCase().includes('code'))
        )
      );
      if (hasErrorHandling) {
        details.push('‚úÖ Gestion d\'erreurs de scanning impl√©ment√©e');
        coverage += 30;
      }

      testCases.push(...[
        'Test d\'ouverture du scanner de codes-barres',
        'Test de d√©tection de code-barres valide',
        'Test de gestion des codes-barres invalides',
        'Test de permissions de cam√©ra',
        'Test de fermeture du scanner',
        'Test d\'int√©gration avec l\'ajout de produit'
      ]);
    } else {
      details.push('‚ùå Scanner de codes-barres non d√©tect√©');
    }

    return {
      feature: 'Scanner de Codes-barres',
      status: coverage >= 70 ? 'pass' : coverage >= 40 ? 'warning' : 'fail',
      details,
      testCases,
      coverage
    };
  }

  /**
   * Valide la gestion des images
   */
  private async validateImageHandling(analyses: ComponentAnalysis[]): Promise<BusinessValidationResult> {
    const details: string[] = [];
    const testCases: string[] = [];
    let coverage = 0;

    // V√©rifier les composants d'image optimis√©e
    const hasOptimizedImages = analyses.some(a => 
      a.imports.some(imp => imp.includes('optimized-image') || imp.includes('OptimizedImage'))
    );
    if (hasOptimizedImages) {
      details.push('‚úÖ Composants d\'images optimis√©es d√©tect√©s');
      coverage += 25;
    }

    // V√©rifier les uploads d'images
    const hasImageUpload = analyses.some(a => 
      a.interactions.some(i => i.type === 'upload') ||
      a.imports.some(imp => imp.includes('image-upload'))
    );
    if (hasImageUpload) {
      details.push('‚úÖ Fonctionnalit√© d\'upload d\'images d√©tect√©e');
      coverage += 25;

      testCases.push(...[
        'Test d\'upload d\'image produit',
        'Test d\'upload d\'image recette',
        'Test de validation du format d\'image',
        'Test de compression automatique',
        'Test d\'aper√ßu avant upload'
      ]);
    }

    // V√©rifier l'int√©gration Firebase Storage
    const hasFirebaseStorage = analyses.some(a => 
      a.businessLogic.some(bl => 
        bl.firebaseOperations.some(op => op.includes('upload') || op.includes('storage'))
      )
    );
    if (hasFirebaseStorage) {
      details.push('‚úÖ Int√©gration Firebase Storage d√©tect√©e');
      coverage += 25;

      testCases.push(...[
        'Test de sauvegarde d\'images dans Firebase Storage',
        'Test de g√©n√©ration d\'URLs d\'images',
        'Test de suppression d\'images du storage'
      ]);
    }

    // V√©rifier l'optimisation des images
    const hasImageOptimization = analyses.some(a => 
      a.imports.some(imp => imp.includes('image-utils') || imp.includes('optimization'))
    );
    if (hasImageOptimization) {
      details.push('‚úÖ Optimisation d\'images impl√©ment√©e');
      coverage += 25;

      testCases.push(...[
        'Test de g√©n√©ration de placeholders blur',
        'Test de redimensionnement automatique',
        'Test de lazy loading des images'
      ]);
    }

    return {
      feature: 'Gestion des Images',
      status: coverage >= 70 ? 'pass' : coverage >= 40 ? 'warning' : 'fail',
      details,
      testCases,
      coverage
    };
  }

  /**
   * Valide l'int√©gration Firestore
   */
  private async validateFirestoreIntegration(analyses: ComponentAnalysis[]): Promise<BusinessValidationResult> {
    const details: string[] = [];
    const testCases: string[] = [];
    let coverage = 0;

    // V√©rifier les op√©rations CRUD
    const hasFirestoreOps = analyses.some(a => 
      a.businessLogic.some(bl => bl.firebaseOperations.length > 0)
    );
    if (hasFirestoreOps) {
      details.push('‚úÖ Op√©rations Firestore d√©tect√©es');
      coverage += 30;
    }

    // V√©rifier la synchronisation temps r√©el
    const hasRealtimeSync = analyses.some(a => 
      a.hooks.some(hook => hook.includes('useFirestore')) ||
      a.imports.some(imp => imp.includes('firebase-hooks'))
    );
    if (hasRealtimeSync) {
      details.push('‚úÖ Synchronisation temps r√©el impl√©ment√©e');
      coverage += 30;

      testCases.push(...[
        'Test de synchronisation temps r√©el des produits',
        'Test de synchronisation temps r√©el des recettes',
        'Test de gestion des d√©connexions r√©seau'
      ]);
    }

    // V√©rifier la gestion hors ligne
    const hasOfflineSupport = analyses.some(a => 
      a.imports.some(imp => imp.includes('offline')) ||
      a.businessLogic.some(bl => bl.flow.some(f => f.includes('offline')))
    );
    if (hasOfflineSupport) {
      details.push('‚úÖ Support hors ligne d√©tect√©');
      coverage += 20;
    }

    // V√©rifier la s√©curit√©
    const hasSecurityRules = analyses.some(a => 
      a.businessLogic.some(bl => bl.validations.some(v => v.includes('permission')))
    );
    if (hasSecurityRules) {
      details.push('‚úÖ R√®gles de s√©curit√© impl√©ment√©es');
      coverage += 20;

      testCases.push(...[
        'Test d\'acc√®s autoris√© aux donn√©es',
        'Test de refus d\'acc√®s non autoris√©',
        'Test de validation des permissions utilisateur'
      ]);
    }

    return {
      feature: 'Int√©gration Firestore',
      status: coverage >= 70 ? 'pass' : coverage >= 40 ? 'warning' : 'fail',
      details,
      testCases,
      coverage
    };
  }

  /**
   * Valide le syst√®me d'analytics
   */
  private async validateAnalytics(analyses: ComponentAnalysis[]): Promise<BusinessValidationResult> {
    const details: string[] = [];
    const testCases: string[] = [];
    let coverage = 0;

    // V√©rifier l'int√©gration analytics
    const hasAnalytics = analyses.some(a => 
      a.imports.some(imp => imp.includes('analytics')) ||
      a.businessLogic.some(bl => bl.flow.some(f => f.includes('analytic')))
    );
    if (hasAnalytics) {
      details.push('‚úÖ Syst√®me d\'analytics int√©gr√©');
      coverage += 40;

      testCases.push(...[
        'Test de tracking d\'ajout de produit',
        'Test de tracking de cr√©ation de recette',
        'Test de tracking de scan de code-barres'
      ]);
    }

    // V√©rifier les m√©triques de performance
    const hasPerformanceTracking = analyses.some(a => 
      a.imports.some(imp => imp.includes('performance'))
    );
    if (hasPerformanceTracking) {
      details.push('‚úÖ Tracking des performances impl√©ment√©');
      coverage += 30;

      testCases.push(...[
        'Test de mesure des temps de r√©ponse',
        'Test de tracking des erreurs',
        'Test de m√©triques de performance UI'
      ]);
    }

    // V√©rifier les tableaux de bord
    const hasDashboard = analyses.some(a => 
      a.name.toLowerCase().includes('analytics') ||
      a.name.toLowerCase().includes('metrics')
    );
    if (hasDashboard) {
      details.push('‚úÖ Tableaux de bord analytics d√©tect√©s');
      coverage += 30;
    }

    return {
      feature: 'Syst√®me d\'Analytics',
      status: coverage >= 70 ? 'pass' : coverage >= 40 ? 'warning' : 'fail',
      details,
      testCases,
      coverage
    };
  }

  /**
   * Valide l'interface utilisateur
   */
  private async validateUserInterface(analyses: ComponentAnalysis[]): Promise<BusinessValidationResult> {
    const details: string[] = [];
    const testCases: string[] = [];
    let coverage = 0;

    // V√©rifier la coh√©rence des composants UI
    const uiComponents = analyses.filter(a => a.filePath.includes('/ui/'));
    if (uiComponents.length > 10) {
      details.push('‚úÖ Syst√®me de design coh√©rent avec composants UI');
      coverage += 25;
    }

    // V√©rifier la responsivit√©
    const hasResponsiveDesign = analyses.some(a => 
      a.hooks.some(hook => hook.includes('mobile')) ||
      a.imports.some(imp => imp.includes('mobile'))
    );
    if (hasResponsiveDesign) {
      details.push('‚úÖ Design responsive impl√©ment√©');
      coverage += 25;

      testCases.push(...[
        'Test de responsive design sur mobile',
        'Test de responsive design sur tablette',
        'Test d\'adaptation des dialogs sur mobile'
      ]);
    }

    // V√©rifier l'accessibilit√©
    const hasAccessibilityFeatures = analyses.some(a => 
      a.interactions.some(i => i.selector.includes('aria-') || i.selector.includes('role='))
    );
    if (hasAccessibilityFeatures) {
      details.push('‚úÖ Fonctionnalit√©s d\'accessibilit√© d√©tect√©es');
      coverage += 25;

      testCases.push(...[
        'Test de navigation au clavier',
        'Test de support des lecteurs d\'√©cran',
        'Test de contraste des couleurs'
      ]);
    }

    // V√©rifier les interactions avanc√©es
    const hasAdvancedInteractions = analyses.some(a => 
      a.interactions.length > 3
    );
    if (hasAdvancedInteractions) {
      details.push('‚úÖ Interactions utilisateur riches impl√©ment√©es');
      coverage += 25;
    }

    return {
      feature: 'Interface Utilisateur',
      status: coverage >= 70 ? 'pass' : coverage >= 40 ? 'warning' : 'fail',
      details,
      testCases,
      coverage
    };
  }

  /**
   * G√©n√®re un rapport de validation m√©tier
   */
  generateBusinessValidationReport(results: BusinessValidationResult[]): string {
    const overallScore = results.reduce((sum, r) => sum + r.coverage, 0) / results.length;
    const passedFeatures = results.filter(r => r.status === 'pass').length;
    const warningFeatures = results.filter(r => r.status === 'warning').length;
    const failedFeatures = results.filter(r => r.status === 'fail').length;

    return `
# Rapport de Validation M√©tier - CuisineZen

## üìä Score Global: ${overallScore.toFixed(1)}%

### üéØ R√©sum√© des Fonctionnalit√©s
- ‚úÖ **Valid√©es**: ${passedFeatures} fonctionnalit√©s
- ‚ö†Ô∏è **Partielles**: ${warningFeatures} fonctionnalit√©s
- ‚ùå **√âchou√©es**: ${failedFeatures} fonctionnalit√©s

## üìã D√©tail par Fonctionnalit√©

${results.map(result => `
### ${result.feature}
**Statut**: ${result.status === 'pass' ? '‚úÖ VALID√â' : result.status === 'warning' ? '‚ö†Ô∏è PARTIEL' : '‚ùå √âCHEC'}
**Couverture**: ${result.coverage}%

**D√©tails d'impl√©mentation**:
${result.details.map(detail => `- ${detail}`).join('\n')}

**Tests recommand√©s** (${result.testCases.length} tests):
${result.testCases.map(test => `- [ ] ${test}`).join('\n')}

---
`).join('')}

## üéØ Priorit√©s d'Am√©lioration

### Actions Critiques
${results.filter(r => r.status === 'fail').map(r => `- **${r.feature}**: Impl√©mentation requise (${r.coverage}% couverture)`).join('\n') || 'Aucune action critique requise'}

### Actions Recommand√©es  
${results.filter(r => r.status === 'warning').map(r => `- **${r.feature}**: Compl√©ter l'impl√©mentation (${r.coverage}% couverture)`).join('\n') || 'Aucune action recommand√©e'}

## üìà Plan de Tests

### Tests √† Impl√©menter en Priorit√©
${results.flatMap(r => r.testCases.slice(0, 3)).map(test => `- [ ] ${test}`).join('\n')}

### Tests de R√©gression
- [ ] Tests de non-r√©gression sur toutes les fonctionnalit√©s valid√©es
- [ ] Tests de performance sur les op√©rations critiques
- [ ] Tests d'int√©gration cross-fonctionnalit√©s

---
*G√©n√©r√© le ${new Date().toLocaleString('fr-FR')} par l'Agent IA CuisineZen*
`;
  }
}

export const businessValidator = new CuisineZenBusinessValidator();