name: 'CuisineZen CI/CD Pipeline'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run nightly quality checks
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'
  FIREBASE_PROJECT_ID: 'cuisinezen-dev'

jobs:
  # Job 1: Code Quality & Security Gates
  code-quality:
    name: 'Code Quality & Security'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:strict

      - name: Check TypeScript
        run: npm run typecheck

      - name: Check Prettier formatting
        run: npm run format:check

      - name: Security scan with Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: auto

      - name: Audit dependencies
        run: npm audit --audit-level=moderate

      - name: Check for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 2: Unit & Integration Testing
  unit-tests:
    name: 'Unit & Integration Tests'
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./qa-automation/reports/coverage/lcov.info
          fail_ci_if_error: true

      - name: Run integration tests
        run: npm run test:integration

      - name: Store test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: qa-automation/reports/

  # Job 3: Mutation Testing (weekly only)
  mutation-testing:
    name: 'Mutation Testing'
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run mutation tests
        run: npm run test:mutation

      - name: Upload mutation test results
        uses: actions/upload-artifact@v4
        with:
          name: mutation-test-results
          path: qa-automation/reports/mutation/

  # Job 4: E2E Testing with Firebase Emulators
  e2e-tests:
    name: 'E2E Tests'
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      firebase-emulator:
        image: node:20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start Firebase emulators
        run: firebase emulators:start --only=auth,firestore,storage &
        env:
          FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}

      - name: Build Next.js app
        run: npm run build

      - name: Start Next.js app
        run: npm start &
        env:
          PORT: 3000

      - name: Wait for services
        run: |
          npx wait-on http://localhost:3000
          npx wait-on http://localhost:9099

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: 'http://localhost:3000'

      - name: Run accessibility tests
        run: npm run test:a11y

      - name: Run visual regression tests
        run: npm run test:visual

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: qa-automation/reports/playwright-html/

  # Job 5: Performance & Lighthouse Testing
  performance:
    name: 'Performance Testing'
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build app for performance testing
        run: npm run build

      - name: Start app
        run: npm start &
        env:
          PORT: 3000

      - name: Wait for app
        run: npx wait-on http://localhost:3000

      - name: Run Lighthouse CI
        run: npm run lighthouse
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run performance tests
        run: npm run test:performance

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: qa-automation/reports/lighthouse/

  # Job 6: AI Quality Audit
  ai-audit:
    name: 'AI Quality Audit'
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Scan React components
        run: npm run qa:scan-components

      - name: Generate additional tests
        run: npm run qa:generate-tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Run AI quality audit
        run: npm run qa:ai-audit
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Upload AI audit results
        uses: actions/upload-artifact@v4
        with:
          name: ai-audit-results
          path: qa-automation/reports/ai-audit/

  # Job 7: Quality Gates Check
  quality-gates:
    name: 'Quality Gates Check'
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, performance]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Run quality gates check
        run: npm run gates:check

      - name: Generate quality report
        run: npm run gates:report

      - name: Upload quality gate results
        uses: actions/upload-artifact@v4
        with:
          name: quality-gate-results
          path: qa-automation/reports/gates/

      - name: Comment PR with quality results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './qa-automation/reports/gates/quality-summary.md';
            if (fs.existsSync(path)) {
              const body = fs.readFileSync(path, 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  # Job 8: Deploy to Firebase (production only)
  deploy:
    name: 'Deploy to Firebase'
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production app
        run: npm run build
        env:
          NODE_ENV: production

      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: '${{ env.FIREBASE_PROJECT_ID }}'
          channelId: live

      - name: Post-deployment smoke tests
        run: |
          sleep 30
          npm run test:e2e:smoke
        env:
          PLAYWRIGHT_BASE_URL: 'https://cuisinezen-dev.web.app'

  # Job 9: Nightly Quality Report
  nightly-report:
    name: 'Nightly Quality Report'
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate comprehensive quality report
        run: npm run gates:all

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#cuisinezen-qa'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,commit,author,action,eventName,ref,workflow
        if: always()